package eu.trentorise.game.model

global Integer green_walk_points;
global Integer green_bike_points;
global Integer green_sustainable_bonus;
global Integer recommendation_bonus;
global Integer green_bus_points_base;
global Integer green_bus_points_step1;
global Integer green_bus_points_step2;
global Integer green_bus_points_step3;
global Integer zero_impact_booster;

global Double bus_threshold_step1;
global Double bus_threshold_step2;
global Double bus_threshold_step3;
global Double walk_min;
global Double walk_max;
global Double bike_max;


declare PRItinerary end

declare PointDelta
	delta : long
	pointType : String
end

rule "public transport update green points"
when
	InputData($bus : data["busDistance"] !=null || $train : data["trainDistance"] != null)
	$pc : PointConcept(name == "green leaves")
then
	log("apply \'public transport update green points\'");	
	if ($bus == null) 
		$bus = 0d;
	if ($train == null)
		$train = 0d;
	Long ptDistance = Math.round((Double)$bus + (Double)$train);
	Integer ptPoints;
	if (ptDistance >= bus_threshold_step1 && ptDistance < bus_threshold_step2)
		ptPoints = green_bus_points_step1;
	else if (ptDistance >= bus_threshold_step2 && ptDistance < bus_threshold_step3)
		ptPoints = green_bus_points_step2;
	else if (ptDistance >= bus_threshold_step3)
		ptPoints = green_bus_points_step3;
	else
		ptPoints = green_bus_points_base;
		
		$pc.setScore($pc.getScore() + ptPoints);
		update($pc);
		insert(new PointDelta(ptPoints,"green leaves")); 
end

rule "0-impact update green points"
when
	InputData($bike : data["bikeDistance"], $walk : data["walkDistance"], $bus : data["busDistance"], $train : data["trainDistance"], $car : data["carDistance"])
	$pc : PointConcept( name == "green leaves")
then
	boolean zeroImpact = ($walk != null || $bike != null) && (($bus == null || ((Double)$bus) == 0) &&  ($car == null || ((Double)$car) == 0) && ($train == null || ((Double)$train) == 0));
	
	Double walkDistance = $walk != null ? (Double) $walk : 0;
	walkDistance = walkDistance < walk_min ? 0 : walkDistance;
	walkDistance = walkDistance > walk_max ? walk_max : walkDistance;
	
	Double bikeDistance = $bike != null ? (Double) $bike : 0;
	bikeDistance = bikeDistance > bike_max ? bike_max : bikeDistance;
	
	Long score = Math.round(walkDistance * green_walk_points)  + Math.round(bikeDistance * green_bike_points) ;
	score = zeroImpact ? score * zero_impact_booster : score; 
	$pc.setScore($pc.getScore() + score);
	update($pc);
	insert(new PointDelta(score,"green leaves"));
end

rule "green sustainable bonus"
	salience 1
when
    InputData(data['sustainable'] == true)
    $pc : PointConcept(name == "green leaves")
then
	log("apply \'green sustainable bonus\'");
	$pc.setScore($pc.getScore() + green_sustainable_bonus);
    update($pc);
    insert(new PointDelta(green_sustainable_bonus,"green leaves")); 
end

rule "recommendation bonus"
	salience 1
when
	Action ($id : id == "app_sent_recommandation")
    $pc : PointConcept(name == "green leaves")
then
	log("apply \'recommendation bonus\'");
	$pc.setScore($pc.getScore() + recommendation_bonus);
    update($pc);
    insert(new PointDelta(recommendation_bonus,"green leaves")); 
end