package eu.trentorise.game.model

global Double walk_min;
global Double bike_min;
global Double train_max;

rule "clear past counters"
lock-on-active
when
	InputData($reset : data["reset"] != null, $reset == true)
	$c : CustomData()
then
	log("resetting all past counters to 0");
	
	$c.put("walk-km-past", (Double) 0.0);
	$c.put("bike-km-past", (Double) 0.0);
	$c.put("bikesharing-km-past", (Double) 0.0);
	$c.put("bus-km-past", (Double) 0.0);
	$c.put("train-km-past", (Double) 0.0);
	$c.put("car-km-past", (Double) 0.0);
	
	$c.put("walk-trips-past", 0);
	$c.put("bike-trips-past", 0);
	$c.put("bikesharing-trips-past", 0);
	$c.put("bus-trips-past", 0);
	$c.put("train-trips-past", 0);
	$c.put("car-trips-past", 0);
	
	update($c);
end

rule "update walk counters"
lock-on-active
when
    InputData( $km : data["walkDistance"] != null, $km >= walk_min)
    $c : CustomData($counterKm : this["walk-km"], $counterTrips: this["walk-trips"], $counterKmPast : this["walk-km-past"], $counterTripsPast: this["walk-trips-past"])
then
	if($counterKm == null) {
		$c.put("walk-km", (Double) $km);
	} else {
		$c.put("walk-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("walk-km-past", (Double) $km);
	} else {
		$c.put("walk-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("walk-trips", 1);
	} else {
		$c.put("walk-trips", (Integer)$counterTrips +1);	
	}
	if($counterTripsPast == null) {
		$c.put("walk-trips-past", 1);
	} else {
		$c.put("walk-trips-past", (Integer) $counterTripsPast + 1);
	}
	log("updated walk counters");
    update($c);
end


rule "update bike counters"
lock-on-active
when
    InputData( $km : data["bikeDistance"] != null, $km >= bike_min)
    $c : CustomData($counterKm : this["bike-km"], $counterTrips : this["bike-trips"], $counterKmPast : this["bike-km-past"], $counterTripsPast: this["bike-trips-past"])
then
	if($counterKm == null) {
		$c.put("bike-km", (Double) $km);
	} else {
		$c.put("bike-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("bike-km-past", (Double) $km);
	} else {
		$c.put("bike-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("bike-trips", 1);
	} else {
		$c.put("bike-trips", (Integer) $counterTrips + 1);
	}
	if($counterTripsPast == null) {
		$c.put("bike-trips-past", 1);
	} else {
		$c.put("bike-trips-past", (Integer) $counterTripsPast + 1);
	}
    update($c);
end


rule "update bikesharing counters"
lock-on-active
when
    InputData( $km : data["bikeDistance"] != null, data["bikesharing"] == true, $km >= bike_min)
    $c : CustomData($counterKm : this["bikesharing-km"], $counterTrips : this["bikesharing-trips"], $counterKmPast : this["bikesharing-km-past"], $counterTripsPast: this["bikesharing-trips-past"])
then
	if($counterKm == null) {
		$c.put("bikesharing-km", (Double) $km);
	} else {
		$c.put("bikesharing-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("bikesharing-km-past", (Double) $km);
	} else {
		$c.put("bikesharing-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("bikesharing-trips", 1);
	} else {
		$c.put("bikesharing-trips", (Integer) $counterTrips + 1);
	}
	if($counterTripsPast == null) {
		$c.put("bikesharing-trips-past", 1);
	} else {
		$c.put("bikesharing-trips-past", (Integer) $counterTripsPast + 1);
	}
    update($c);
end


rule "update bus counters"
lock-on-active
when
    InputData( $km : data["busDistance"] != null)
    $c : CustomData($counterKm : this["bus-km"], $counterTrips : this["bus-trips"], $counterKmPast : this["bus-km-past"], $counterTripsPast: this["bus-trips-past"])
then
	if($counterKm == null) {
		$c.put("bus-km", (Double) $km);
	} else {
		$c.put("bus-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("bus-km-past", (Double) $km);
	} else {
		$c.put("bus-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("bus-trips", 1);
	} else {
		$c.put("bus-trips", (Integer) $counterTrips + 1);
	}
	if($counterTripsPast == null) {
		$c.put("bus-trips-past", 1);
	} else {
		$c.put("bus-trips-past", (Integer) $counterTripsPast + 1);
	}
    update($c);
end


rule "update train counters"
lock-on-active
when
    InputData( $km : data["trainDistance"] != null)
    $c : CustomData($counterKm : this["train-km"], $counterTrips : this["train-trips"], $counterKmPast : this["train-km-past"], $counterTripsPast: this["train-trips-past"])
then
	if($counterKm == null) {
		$c.put("train-km", (Double) $km);
	} else {
		$c.put("train-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("train-km-past", (Double) $km);
	} else {
		$c.put("train-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("train-trips", 1);
	} else {
		$c.put("train-trips", (Integer) $counterTrips + 1);
	}
	if($counterTripsPast == null) {
		$c.put("train-trips-past", 1);
	} else {
		$c.put("train-trips-past", (Integer) $counterTripsPast + 1);
	}
    update($c);
end

rule "update car counters"
lock-on-active
when
    InputData( $km : data["carDistance"] != null)
    $c : CustomData($counterKm : this["car-km"],$counterTrips : this["car-trips"], $counterKmPast : this["car-km-past"], $counterTripsPast: this["car-trips-past"])
then
	if($counterKm == null) {
		$c.put("car-km", (Double) $km);
	} else {
		$c.put("car-km", (Double) $counterKm + (Double) $km);
	}
	if($counterKmPast == null) {
		$c.put("car-km-past", (Double) $km);
	} else {
		$c.put("car-km-past", (Double) $counterKmPast + (Double) $km);
	}
	if($counterTrips == null) {
		$c.put("car-trips", 1);
	} else {
		$c.put("car-trips", (Integer) $counterTrips + 1);
	}
	if($counterTripsPast == null) {
		$c.put("car-trips-past", 1);
	} else {
		$c.put("car-trips-past", (Integer) $counterTripsPast + 1);
	}
    update($c);
end
